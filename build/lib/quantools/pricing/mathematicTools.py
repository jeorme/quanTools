import numpy as np
import math
def bivariateCND(x, y, rho):
    
    absRho = abs(rho)

    NG = 0
    LG = 0

    XX = np.zeros((10, 3))
    W = np.zeros((10, 3))
    h = -x
    k = -y
    hk = h * k
    hs = 0
    
    BVN = 0
    Ass = 0
    asr = 0
    sn = 0
    
    A = 0
    b = 0
    bs = 0
    c = 0
    d = 0
    
    xs = 0
    rs = 0
    
    W[0][0] = 0.17132449237917
    XX[0][0] = -0.932469514203152
    W[1][0] = 0.360761573048138
    XX[1][0] = -0.661209386466265
    W[2][0] = 0.46791393457269
    XX[2][0] = -0.238619186083197
    
    W[0][1] =  0.0471753363865118
    XX[0][1] =  -0.981560634246719
    
    W[1][1] = 0.106939325995318
    XX[1][1] = -0.904117256370475
    
    W[2][1] = 0.160078328543346
    XX[2][1] = -0.769902674194305
    
    W[3][1] = 0.203167426723066
    XX[3][1] = -0.587317954286617
    
    W[4][1] = 0.233492536538355
    XX[4][1] = -0.36783149899818
    
    W[5][1] = 0.249147045813403
    XX[5][1] = -0.125233408511469
    
    W[0][2] = 0.0176140071391521
    XX[0][2] = -0.993128599185095
    
    W[1][2] = 0.0406014298003869
    XX[1][2] = -0.963971927277914
    
    W[2][2] = 0.0626720483341091
    XX[2][2] = -0.912234428251326
    
    W[3][2] = 0.0832767415767048
    XX[3][2] = -0.839116971822219
    
    W[4][2] = 0.10193011981724
    XX[4][2] = -0.746331906460151
    
    W[5][2] = 0.1181945319561518
    XX[5][2] = -0.636053680726515
    
    W[6][2] = 0.131688638449177
    XX[6][2] = -0.510867001950827
    
    W[7][2] = 0.142096109318382
    XX[7][2] = -0.37370608871542
    
    W[8][2] = 0.149172986472604
    XX[8][2] = -0.227785851141645
    
    W[9][2] = 0.152753387130726
    XX[9][2] = -0.0765265211334973
    
    if (absRho < 0.3):
        NG = 0
        LG = 2
    elif (absRho < 0.75):
        NG = 1
        LG = 5
    else:
        NG = 2
        LG = 9
    
    if (absRho < 0.925):
        if (absRho > 0):
            hs = (h * h + k * k) / 2
            asr = math.asin(rho)
            for i in range(0,LG+1):
                for ISs in range(-1,2,2):
                    sn = math.sin(asr * (ISs * XX[i][NG] + 1) / 2)
                    BVN = BVN + W[i][NG] * math.exp((sn * hk - hs) / (1 - sn * sn))

            BVN = BVN * asr / (4 * math.pi)
        BVN = BVN + normalCDF(-h) * normalCDF(-k)
    else:
        if rho < 0:
            k = -k
            hk = -hk
        if absRho < 1:
            Ass = (1 - rho) * (1 + rho)
            A = math.sqrt(Ass)
            bs = (h - k) * (h - k)
            c = (4 - hk) / 8
            d = (12 - hk) / 16
            asr = -(bs / Ass + hk) / 2
    
        if (asr > -100):
            BVN = A * math.exp(asr) * (1 - c * (bs - Ass) * (1 - d * bs / 5) / 3 + c * d * Ass * Ass / 5)
    
        if (-hk < 100):
            b = math.sqrt(bs)
            BVN = BVN - math.exp(-hk / 2) * math.sqrt(2 * math.pi) * normalCDF(-b / A) * b * (1 - c * bs * (1 - d * bs / 5) / 3)

        A = A / 2
        for i in range(0,LG+1):
            for ISs in range(-1,2,2):
                xs = pow((A * (ISs * XX[i][NG] + 1)), 2)
                rs = math.sqrt(1 - xs)
                asr = -(bs / xs + hk) / 2
                if (asr > -100):
                    BVN = BVN + A * W[i][NG] * math.exp(asr) * (math.exp(-hk * (1 - rs) / (2 * (1 + rs))) / rs - (1 + c * xs * (1 + d * xs)))
        BVN = -BVN / (2 * math.pi)
    
    if (rho > 0):
        BVN = BVN + normalCDF(-max(h, k))
    else:
        BVN = -BVN
        if k > h:
            BVN = BVN + normalCDF(k) - normalCDF(h)

    return BVN


def normalCDF(u):
    y = abs(u)
    if (y > 35.0):
        if(u > 0):
            return 1
        return 0
    
    if (y <= 0.662912607):
        a0 = 1.161110663653770e-2
        a1 = 3.951404679838207e-1
        a2 = 2.846603853776254e+1
        a3 = 1.887426188426510e+2
        a4 = 3.209377589138469e+3

        b0 = 1.767766952966369e-1
        b1 = 8.344316438579620
        b2 = 1.725514762600375e+2
        b3 = 1.813893686502485e+3
        b4 = 8.044716608901563e+3

        z = y * y
        y = u * ((((a0 * z + a1) * z + a2) * z + a3) * z + a4)
        y /= ((((b0 * z + b1) * z + b2) * z + b3) * z + b4)
        return 0.5 + y

    zinterm = 0.5 * math.exp(-y * y / 2)
    if (y <= 4.0):
        c0 = 2.15311535474403846e-8
        c1 = 5.64188496988670089e-1
        c2 = 8.88314979438837594
        c3 = 6.61191906371416295e+1
        c4 = 2.98635138197400131e+2
        c5 = 8.81952221241769090e+2
        c6 = 1.71204761263407058e+3
        c7 = 2.05107837782607147e+3
        c8 = 1.23033935479799725e+3

        d0 = 1.0
        d1 = 1.57449261107098347e+1
        d2 = 1.17693950891312499e+2
        d3 = 5.37181101862009858e+2
        d4 = 1.62138957456669019e+3
        d5 = 3.29079923573345963e+3
        d6 = 4.36261909014324716e+3
        d7 = 3.43936767414372164e+3
        d8 = 1.23033935480374942e+3

        y = y / 1.4142135623730950488
        num = ((((((((c0 * y + c1) * y + c2) * y + c3) * y + c4) * y + c5) * y + c6) * y + c7) * y + c8)
        den = ((((((((d0 * y + d1) * y + d2) * y + d3) * y + d4) * y + d5) * y + d6) * y + d7) * y + d8)

        y = num / den
        y = zinterm * y
    else:
        p0 = 1.63153871373020978e-2
        p1 = 3.05326634961232344e-1
        p2 = 3.60344899949804439e-1
        p3 = 1.25781726111229246e-1
        p4 = 1.60837851487422766e-2
        p5 = 6.58749161529837803e-4

        q0 = 1.00000000000000000
        q1 = 2.56852019228982242
        q2 = 1.87295284992346047
        q3 = 5.27905102951428412e-1
        q4 = 6.05183413124413191e-2
        q5 = 2.33520497626869185e-3

        z = zinterm * 1.41421356237309504880 / y
        y = 2 / (y * y)
        y = y * (((((p0 * y + p1) * y + p2) * y + p3) * y + p4) * y + p5) / (((((q0 * y + q1) * y + q2) * y + q3) * y + q4) * y + q5)
        y = z * (0.564189583547756287 - y)

    if (u < 0):
        return y
    return 1 - y

